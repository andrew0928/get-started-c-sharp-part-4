#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

## 2. 使 C# 中的轉型和轉換技術轉換資料類型
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/

#!markdown

### 2-2, 練習 - 探索資料類型的強制型轉和轉換
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/2-exercise-data-type-conversion

#!csharp

// demo 1, 撰寫程式碼，以嘗試新增 int 和 string，並儲存 int 中的結果

int first = 2;
string second = "4";
int result = first + second;
Console.WriteLine(result);

#!csharp

// 請花一分鐘時間考慮編譯器為何無法執行第一個程式碼範例。
// 您可以採 相反 做法，將數字串連到 string 並以字串變數儲存。 

int first = 2;
string second = "4";
string result = first + second;
Console.WriteLine(result);

#!csharp

// demo 3, 問題: 嘗試變更值的資料類型可能會導致資訊遺失嗎?

int myInt = 3;
Console.WriteLine($"int: {myInt}");

decimal myDecimal = myInt;
Console.WriteLine($"decimal: {myDecimal}");

#!csharp

// demo 4, 執行強制型轉

decimal myDecimal = 3.14m;
Console.WriteLine($"decimal: {myDecimal}");

int myInt = (int)myDecimal;
Console.WriteLine($"int: {myInt}");

#!csharp

// demo 5, 判斷您的轉換是「放大轉換」還是「縮小轉換」

decimal myDecimal = 1.23456789m;
float myFloat = (float)myDecimal;

Console.WriteLine($"Decimal: {myDecimal}");
Console.WriteLine($"Float  : {myFloat}");

#!csharp

// demo 6, 執行資料轉換; 使用 ToString() 將數位轉換成 string

int first = 5;
int second = 7;
string message = first.ToString() + second.ToString();
Console.WriteLine(message);

#!csharp

// demo 7, 使用 Parse() 協助程式方法將 string 轉換為 int

string first = "5";
string second = "7";
int sum = int.Parse(first) + int.Parse(second);
Console.WriteLine(sum);

#!csharp

// demo 8, 使用 Convert 類別將 string 轉換為 int

string value1 = "5";
string value2 = "7";
int result = Convert.ToInt32(value1) * Convert.ToInt32(value2);
Console.WriteLine(result);

#!csharp

// demo 9, 比較強制型轉，並將 decimal 轉換成 int

int value = (int)1.5m; // casting truncates
Console.WriteLine(value);

int value2 = Convert.ToInt32(1.5m); // converting rounds up
Console.WriteLine(value2);

#!csharp

// exam, 下列哪一個轉換會將值四捨五入 (與截斷)? 

// answer: 1
// int cost = (int) 3.75m;

// answer: 2
// int cost = Convert.ToInt32(3.75m);

// answer: 3
// uint cost = (uint)3.75m;

Console.WriteLine($"The value of [cost] is: {cost}");

#!markdown

### 2-3, 練習 - 檢查 TryParse() 方法
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/3-exercise-tryparse

#!csharp

// demo 1

string name = "Bob";
Console.WriteLine(int.Parse(name));

#!csharp

// demo 2, 將字串 TryParse() 至 int

string value = "102";
int result = 0;
if (int.TryParse(value, out result))
{
    Console.WriteLine($"Measurement: {result}");
}
else
{
    Console.WriteLine("Unable to report the measurement.");
}

#!csharp

// demo 3, 稍後在程式碼中使用剖析的 int


string value = "102";
int result = 0;
if (int.TryParse(value, out result))
{
    Console.WriteLine($"Measurement: {result}");
}
else
{
    Console.WriteLine("Unable to report the measurement.");
}

Console.WriteLine($"Measurement (w/ offset): {50 + result}");

#!csharp

// demo 4, 將字串變數修改為無法剖析的值

// 修改程式碼的第一行，將變數 value 重新初始化為不同的值。
string value = "bad";
int result = 0;
if (int.TryParse(value, out result))
{
    Console.WriteLine($"Measurement: {result}");
}
else
{
    Console.WriteLine("Unable to report the measurement.");
}

// 此外，請修改最後一行的程式碼，以確保結果大於 0，再顯示第二個訊息。
if (result > 0)
    Console.WriteLine($"Measurement (w/ offset): {50 + result}");

#!csharp

// quiz

string myInput = "2.71828";
decimal myInputDecimal;

// answer: 1
//myInputDecimal = (decimal)(myInput);

// answer: 2
//myInputDecimal = myInput + 0;

// answer: 3
//decimal.TryParse(myInput, out myInputDecimal);

Console.WriteLine(myInputDecimal)

#!markdown

### 2-4, 練習 - 完成將字串陣列值合併為字串和整數的挑戰
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/4-challenge

#!csharp

// 解答 (請先自己練習，之後再來看答案)

string[] values = { "12.3", "45", "ABC", "11", "DEF" };

decimal total = 0m;
string message = "";

foreach (var value in values)
{
    decimal number; // stores the TryParse "out" value
    if (decimal.TryParse(value, out number))
    {
        total += number;
    } else
    {
        message += value;
    }
}

Console.WriteLine($"Message: {message}");
Console.WriteLine($"Total: {total}");

#!markdown

### 2-6, 練習 - 完成將數學運算輸出為特定數字類型的挑戰
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/6-challenge-2

#!csharp

// demo 1

int value1 = 12;
decimal value2 = 6.2m;
float value3 = 4.3f;

// Your code here to set result1
// Hint: You need to round the result to nearest integer (don't just truncate)
Console.WriteLine($"Divide value1 by value2, display the result as an int: {result1}");

// Your code here to set result2
Console.WriteLine($"Divide value2 by value3, display the result as a decimal: {result2}");

// Your code here to set result3
Console.WriteLine($"Divide value3 by value1, display the result as a float: {result3}");

#!csharp

// demo 1 - solution

int value1 = 12;
decimal value2 = 6.2m;
float value3 = 4.3f;

// The Convert class is best for converting the fractional decimal numbers into whole integer numbers
// Convert.ToInt32() rounds up the way you would expect.
int result1 = Convert.ToInt32((decimal)value1 / value2);
Console.WriteLine($"Divide value1 by value2, display the result as an int: {result1}");

decimal result2 = value2 / (decimal)value3;
Console.WriteLine($"Divide value2 by value3, display the result as a decimal: {result2}");

float result3 = value3 / value1;
Console.WriteLine($"Divide value3 by value1, display the result as a float: {result3}");

#!markdown

### (獨家加料) Andrew's Note - 弄懂 C# 語法在 Compile-Time 與 Run-Time 的差別

https://www.c-sharpcorner.com/UploadFile/8911c4/code-execution-process/

![](https://www.c-sharpcorner.com/UploadFile/8911c4/code-execution-process/Images/Code-Execution-Process.jpg)
