#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

## MVP 聚技站｜.NET C# 系列 | 臺灣版, 2023/11/09 - Andrew Wu

![banner](image.png)

主題: 在 C# 主控台應用程式中使用變數資料 (開始使用 C#，第 4 部分)

深入探索資料與類型，並學習如何操作字串與數值資料，以及對陣列執行作業。 在此學習路徑中，您將會：

- 針對您必須處理的資料，選擇正確的資料類型
- 轉換資料並將資料從一種類型轉換成另一種類型
- 修改字串資料，設定其格式以供顯示或變更字串內容
- 操作陣列、新增、移除及排序資料

* Microsoft Learn 連結: [Learn C#](https://learn.microsoft.com/zh-tw/collections/yz26f8y64n7k07?WT.mc_id=dotnet-35129-website&sharingId=AZ-MVP-5002155)

#!csharp

// 互動式的 demo: .NET Interactive Notebooks for C#
// 參考保哥的 GitHub: https://github.com/doggy8088/csharp-notebooks#net-interactive-notebooks-for-c

var name = "Andrew Wu";
Console.WriteLine($"Hello World, {name}!");

#!markdown

## 1. 在您的 C# 程式碼中選擇正確資料類型
https://learn.microsoft.com/zh-tw/training/modules/csharp-choose-data-type/

#!markdown

### 1-3, 練習 - 探索整數類型

https://learn.microsoft.com/zh-tw/training/modules/csharp-choose-data-type/3-exercise-integral-types

#!csharp

// demo 1: 使用每個帶正負號整數型別的 MinValue 和 MaxValue 屬性

Console.WriteLine("Signed integral types:");

Console.WriteLine($"sbyte  : {sbyte.MinValue} to {sbyte.MaxValue}");
Console.WriteLine($"short  : {short.MinValue} to {short.MaxValue}");
Console.WriteLine($"int    : {int.MinValue} to {int.MaxValue}");
Console.WriteLine($"long   : {long.MinValue} to {long.MaxValue}");

#!csharp

// demo 2: 使用每個不帶正負號整數型別的 MinValue 和 MaxValue 屬性

Console.WriteLine("");
Console.WriteLine("Unsigned integral types:");

Console.WriteLine($"byte   : {byte.MinValue} to {byte.MaxValue}");
Console.WriteLine($"ushort : {ushort.MinValue} to {ushort.MaxValue}");
Console.WriteLine($"uint   : {uint.MinValue} to {uint.MaxValue}");
Console.WriteLine($"ulong  : {ulong.MinValue} to {ulong.MaxValue}");

#!markdown

### 1-4, 練習 - 探索浮點類型
https://learn.microsoft.com/zh-tw/training/modules/csharp-choose-data-type/4-exercise-floating-point-types

#!csharp

// demo 1: 使用每個帶正負號浮動型別的 MinValue 和 MaxValue 屬性

Console.WriteLine("");
Console.WriteLine("Floating point types:");
Console.WriteLine($"float  : {float.MinValue} to {float.MaxValue} (with ~6-9 digits of precision)");
Console.WriteLine($"double : {double.MinValue} to {double.MaxValue} (with ~15-17 digits of precision)");
Console.WriteLine($"decimal: {decimal.MinValue} to {decimal.MaxValue} (with 28-29 digits of precision)");

#!markdown

### 1-5, 練習 - 探索參考類型
https://learn.microsoft.com/zh-tw/training/modules/csharp-choose-data-type/5-exercise-reference-types

#!csharp

// demo: C# 字串資料類型有何不同？

string shortenedString = "Hello World!";
Console.WriteLine(shortenedString);

#!markdown

### (獨家加料) Andrew's Comments:

1. 參考 (reference) 跟 數值 (value) 的差別?
1. 物件 (object) 跟 基礎型別 (basic type) 的差別
1. 儲存在哪裡? 生命週期 (何時被 "建立"，何時被 "刪除"?) 的區別?
1. Labs

#!csharp

// value variable 直接存 "內容"，指派的時候會 copy value

int a = 100;
int b = a;
a = 101;
Console.WriteLine($"variable (b) is: {b}");

#!csharp

// reference variable 只存 "參考", 指派的時候只會 copy "reference", 內容本身不會被複製

class MyData
{
    public int IntegerValue = 0;
}

MyData a = new MyData() { IntegerValue = 100 };
MyData b = a;
a.IntegerValue = 101;
Console.WriteLine($"variable (b) is: {b.IntegerValue}");

#!csharp

// 同上, class (reference type) 換成 struct (value type), 結果就不一樣了:

struct MyData
{
    public int IntegerValue;
}

MyData a;
a.IntegerValue = 100;

MyData b = a;
a.IntegerValue = 101;

Console.WriteLine($"variable (b) is: {b.IntegerValue}");

#!csharp

// 同上，函數傳遞 (parameters or return value) 也是一樣，會因 value / reference type 而異

#!markdown

## 2. 使 C# 中的轉型和轉換技術轉換資料類型
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/

#!markdown

### 2-2, 練習 - 探索資料類型的強制型轉和轉換
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/2-exercise-data-type-conversion

#!csharp

// demo 1, 撰寫程式碼，以嘗試新增 int 和 string，並儲存 int 中的結果

int first = 2;
string second = "4";
int result = first + second;
Console.WriteLine(result);

#!csharp

// 請花一分鐘時間考慮編譯器為何無法執行第一個程式碼範例。
// 您可以採 相反 做法，將數字串連到 string 並以字串變數儲存。 

int first = 2;
string second = "4";
string result = first + second;
Console.WriteLine(result);

#!csharp

// demo 3, 問題: 嘗試變更值的資料類型可能會導致資訊遺失嗎?

int myInt = 3;
Console.WriteLine($"int: {myInt}");

decimal myDecimal = myInt;
Console.WriteLine($"decimal: {myDecimal}");

#!csharp

// demo 4, 執行強制型轉

decimal myDecimal = 3.14m;
Console.WriteLine($"decimal: {myDecimal}");

int myInt = (int)myDecimal;
Console.WriteLine($"int: {myInt}");

#!csharp

// demo 5, 判斷您的轉換是「放大轉換」還是「縮小轉換」

decimal myDecimal = 1.23456789m;
float myFloat = (float)myDecimal;

Console.WriteLine($"Decimal: {myDecimal}");
Console.WriteLine($"Float  : {myFloat}");

#!csharp

// demo 6, 執行資料轉換; 使用 ToString() 將數位轉換成 string

int first = 5;
int second = 7;
string message = first.ToString() + second.ToString();
Console.WriteLine(message);

#!csharp

// demo 7, 使用 Parse() 協助程式方法將 string 轉換為 int

string first = "5";
string second = "7";
int sum = int.Parse(first) + int.Parse(second);
Console.WriteLine(sum);

#!csharp

// demo 8, 使用 Convert 類別將 string 轉換為 int

string value1 = "5";
string value2 = "7";
int result = Convert.ToInt32(value1) * Convert.ToInt32(value2);
Console.WriteLine(result);

#!csharp

// demo 9, 比較強制型轉，並將 decimal 轉換成 int

int value = (int)1.5m; // casting truncates
Console.WriteLine(value);

int value2 = Convert.ToInt32(1.5m); // converting rounds up
Console.WriteLine(value2);

#!csharp

// exam, 下列哪一個轉換會將值四捨五入 (與截斷)? 

// answer: 1
// int cost = (int) 3.75m;

// answer: 2
// int cost = Convert.ToInt32(3.75m);

// answer: 3
// uint cost = (uint)3.75m;

Console.WriteLine($"The value of [cost] is: {cost}");

#!markdown

### 2-3, 練習 - 檢查 TryParse() 方法
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/3-exercise-tryparse

#!csharp

// demo 1

string name = "Bob";
Console.WriteLine(int.Parse(name));

#!csharp

// demo 2, 將字串 TryParse() 至 int

string value = "102";
int result = 0;
if (int.TryParse(value, out result))
{
    Console.WriteLine($"Measurement: {result}");
}
else
{
    Console.WriteLine("Unable to report the measurement.");
}

#!csharp

// demo 3, 稍後在程式碼中使用剖析的 int


string value = "102";
int result = 0;
if (int.TryParse(value, out result))
{
    Console.WriteLine($"Measurement: {result}");
}
else
{
    Console.WriteLine("Unable to report the measurement.");
}

Console.WriteLine($"Measurement (w/ offset): {50 + result}");

#!csharp

// demo 4, 將字串變數修改為無法剖析的值

// 修改程式碼的第一行，將變數 value 重新初始化為不同的值。
string value = "bad";
int result = 0;
if (int.TryParse(value, out result))
{
    Console.WriteLine($"Measurement: {result}");
}
else
{
    Console.WriteLine("Unable to report the measurement.");
}

// 此外，請修改最後一行的程式碼，以確保結果大於 0，再顯示第二個訊息。
if (result > 0)
    Console.WriteLine($"Measurement (w/ offset): {50 + result}");

#!csharp

// quiz

string myInput = "2.71828";
decimal myInputDecimal;

// answer: 1
//myInputDecimal = (decimal)(myInput);

// answer: 2
//myInputDecimal = myInput + 0;

// answer: 3
//decimal.TryParse(myInput, out myInputDecimal);

Console.WriteLine(myInputDecimal)

#!markdown

### 2-4, 練習 - 完成將字串陣列值合併為字串和整數的挑戰
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/4-challenge

#!csharp

// 解答 (請先自己練習，之後再來看答案)

string[] values = { "12.3", "45", "ABC", "11", "DEF" };

decimal total = 0m;
string message = "";

foreach (var value in values)
{
    decimal number; // stores the TryParse "out" value
    if (decimal.TryParse(value, out number))
    {
        total += number;
    } else
    {
        message += value;
    }
}

Console.WriteLine($"Message: {message}");
Console.WriteLine($"Total: {total}");

#!markdown

### 2-6, 練習 - 完成將數學運算輸出為特定數字類型的挑戰
https://learn.microsoft.com/zh-tw/training/modules/csharp-convert-cast/6-challenge-2

#!csharp

// demo 1

int value1 = 12;
decimal value2 = 6.2m;
float value3 = 4.3f;

// Your code here to set result1
// Hint: You need to round the result to nearest integer (don't just truncate)
Console.WriteLine($"Divide value1 by value2, display the result as an int: {result1}");

// Your code here to set result2
Console.WriteLine($"Divide value2 by value3, display the result as a decimal: {result2}");

// Your code here to set result3
Console.WriteLine($"Divide value3 by value1, display the result as a float: {result3}");

#!csharp

// demo 1 - solution

int value1 = 12;
decimal value2 = 6.2m;
float value3 = 4.3f;

// The Convert class is best for converting the fractional decimal numbers into whole integer numbers
// Convert.ToInt32() rounds up the way you would expect.
int result1 = Convert.ToInt32((decimal)value1 / value2);
Console.WriteLine($"Divide value1 by value2, display the result as an int: {result1}");

decimal result2 = value2 / (decimal)value3;
Console.WriteLine($"Divide value2 by value3, display the result as a decimal: {result2}");

float result3 = value3 / value1;
Console.WriteLine($"Divide value3 by value1, display the result as a float: {result3}");

#!markdown

### (獨家加料) Andrew's Note - 弄懂 C# 語法在 Compile-Time 與 Run-Time 的差別

https://www.c-sharpcorner.com/UploadFile/8911c4/code-execution-process/

![](https://www.c-sharpcorner.com/UploadFile/8911c4/code-execution-process/Images/Code-Execution-Process.jpg)

#!markdown

## 3. 使用 C# 中的協助程式方法在陣列上執行作業
https://learn.microsoft.com/zh-tw/training/modules/csharp-arrays-operations/

#!markdown

### 3-2, 練習 - 探索 Sort() 與 Reverse()
https://learn.microsoft.com/zh-tw/training/modules/csharp-arrays-operations/2-exercise-sort-reverse

#!csharp

// demo 1, 建立棧板陣列，然後排序它們

string[] pallets = { "B14", "A11", "B12", "A13" };

Console.WriteLine("Sorted...");
Array.Sort(pallets);
foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

#!csharp

// demo 2, 反轉棧板順序

string[] pallets = { "B14", "A11", "B12", "A13" };

Console.WriteLine("Sorted...");
Array.Sort(pallets);
foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

Console.WriteLine("");
Console.WriteLine("Reversed...");
Array.Reverse(pallets);
foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

#!markdown

### (獨家加料) Andrew's Note

練習查閱 Microsoft .NET / C# 官方文件

https://learn.microsoft.com/zh-tw/dotnet/api/system.array.sort?view=net-7.0

#!markdown

### 3-3, 練習 - 探索 Clear() 與 Resize()

https://learn.microsoft.com/zh-tw/training/modules/csharp-arrays-operations/3-exercise-clear-resize

#!csharp

// demo 1, 使用陣列方法來清除陣列和調整大小

string[] pallets = { "B14", "A11", "B12", "A13" };
Console.WriteLine("");

Array.Clear(pallets, 0, 2);
Console.WriteLine($"Clearing 2 ... count: {pallets.Length}");
foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

#!csharp

// demo 2, 存取已清除元素的值

string[] pallets = { "B14", "A11", "B12", "A13" };
Console.WriteLine("");

Console.WriteLine($"Before: {pallets[0]}");
Array.Clear(pallets, 0, 2);
Console.WriteLine($"After: {pallets[0]}");

Console.WriteLine($"Clearing 2 ... count: {pallets.Length}");
foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

#!csharp

// demo 3, 在已清除的元素上呼叫字串協助程式方法

string[] pallets = { "B14", "A11", "B12", "A13" };
Console.WriteLine("");

Console.WriteLine($"Before: {pallets[0].ToLower()}");
Array.Clear(pallets, 0, 2);
Console.WriteLine($"After: {pallets[0].ToLower()}");

Console.WriteLine($"Clearing 2 ... count: {pallets.Length}");
foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

#!csharp

// demo 4, 調整陣列的大小以新增更多元素

string[] pallets = { "B14", "A11", "B12", "A13" };
Console.WriteLine("");

Array.Clear(pallets, 0, 2);
Console.WriteLine($"Clearing 2 ... count: {pallets.Length}");
foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

Console.WriteLine("");
Array.Resize(ref pallets, 6);
Console.WriteLine($"Resizing 6 ... count: {pallets.Length}");

pallets[4] = "C01";
pallets[5] = "C02";

foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

#!csharp

// demo 5, 調整陣列的大小以移除元素

string[] pallets = { "B14", "A11", "B12", "A13" };
Console.WriteLine("");

Array.Clear(pallets, 0, 2);
Console.WriteLine($"Clearing 2 ... count: {pallets.Length}");
foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

Console.WriteLine("");
Array.Resize(ref pallets, 6);
Console.WriteLine($"Resizing 6 ... count: {pallets.Length}");

pallets[4] = "C01";
pallets[5] = "C02";

foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

Console.WriteLine("");
Array.Resize(ref pallets, 3);
Console.WriteLine($"Resizing 3 ... count: {pallets.Length}");

foreach (var pallet in pallets)
{
    Console.WriteLine($"-- {pallet}");
}

#!markdown

### 3-4, 練習 - 探索 Split() 與 Join()

https://learn.microsoft.com/zh-tw/training/modules/csharp-arrays-operations/4-exercise-split-join

#!csharp

// demo 1, 反轉，然後將字元陣列合併為新字串

string value = "abc123";
char[] valueArray = value.ToCharArray();
Array.Reverse(valueArray);
string result = new string(valueArray);
Console.WriteLine(result);

#!csharp

// demo 2, 使用 Join() 將所有字元合併為新的以逗點分隔值的字串

string value = "abc123";
char[] valueArray = value.ToCharArray();
Array.Reverse(valueArray);
// string result = new string(valueArray);
string result = String.Join(",", valueArray);
Console.WriteLine(result);

#!csharp

// demo 3, Split() 逗號分隔值字串到字串陣列

string value = "abc123";
char[] valueArray = value.ToCharArray();
Array.Reverse(valueArray);
// string result = new string(valueArray);
string result = String.Join(",", valueArray);
Console.WriteLine(result);

string[] items = result.Split(',');
foreach (string item in items)
{
    Console.WriteLine(item);
}

#!markdown

## 4. 設定用於在 C# 中顯示之英數字元資料的格式
https://learn.microsoft.com/zh-tw/training/modules/csharp-format-strings/

#!markdown

## 5. 在 C# 中使用內建的字串資料類型方法來修改字串內容
https://learn.microsoft.com/zh-tw/training/modules/csharp-modify-content/
